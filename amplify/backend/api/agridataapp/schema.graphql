type User
  @model
  @key(
    name: "usersByRetailerCompany"
    fields: ["retailerCompanyID"]
    queryField: "getUsersByRetailerCompany"
  )
  @key(
    name: "usersBySupplierCompany"
    fields: ["supplierCompanyID"]
    queryField: "getUsersBySupplierCompany"
  ) 
  @key(
    name: "usersByFarmerCompany"
    fields: ["farmerCompanyID"]
    queryField: "getUsersByFarmerCompany"
  ) {
  id: ID
  name: String
  role: String
  email: String
  retailerCompanyID: ID
  supplierCompanyID: ID
  farmerCompanyID: ID
  chatGroup: [ChatGroupUsers]
    @connection(keyName: "gettingChatGroupsByUser", fields: ["id"])
  contactNumber: String
  retailerCompany: RetailerCompany @connection(fields: ["retailerCompanyID"])
  supplierCompany: SupplierCompany @connection(fields: ["supplierCompanyID"])
  farmerCompany: FarmerCompany @connection(fields: ["farmerCompanyID"])
  updatedAt: String
  createdAt: String
}

type RetailerCompany @model {
  id: ID
  name: String
  employees: [User]
    @connection(keyName: "usersByRetailerCompany", fields: ["id"])
  address: String
  rating: Rating
  bankAccount: BankDetails
  registrationNumber: String
  favouriteStores: [Favourites]
  goodsTask: [GoodsTaskBetweenRandS]
    @connection(keyName: "goodsTasksByRetailer", fields: ["id"])
  paymentTask: [PaymentTaskBetweenRandS]
    @connection(keyName: "paymentTasksByRetailer", fields: ["id"])
  invoice: [InvoiceBetweenRandS] @connection(keyName: "invoiceByRetailer", fields: ["id"])
  chatGroups: [ChatGroup]
    @connection(keyName: "chatGroupbyRetailer", fields: ["id"])
  verified: Boolean
  contactDetails:ContactDetails
  logo: String
  updatedAt: String
  createdAt: String
}

type SupplierCompany @model {
  id: ID
  name: String
  employees: [User]
    @connection(keyName: "usersBySupplierCompany", fields: ["id"])
  address: String
  rating: Rating
  bankAccount: BankDetails
  mostRecentInvoiceNumber:String
  favouriteStores: [Favourites]
  registrationNumber: String
  listings: [SupplierListing]
    @connection(keyName: "listingsBySupplier", fields: ["id"])
  goodsTaskRetailer: [GoodsTaskBetweenRandS]
    @connection(keyName: "goodsTasksRetailerBySupplier", fields: ["id"])
  goodsTaskFarmer: [GoodsTaskBetweenSandF]
    @connection(keyName: "goodsTasksFarmerBySupplier", fields: ["id"])
  paymentTaskRetailer: [PaymentTaskBetweenRandS]
    @connection(keyName: "paymentTasksRetailerBySupplier", fields: ["id"])
  paymentTaskFarmer: [PaymentTaskBetweenSandF]
    @connection(keyName: "paymentTasksFarmerBySupplier", fields: ["id"])
  invoiceRetailer: [InvoiceBetweenRandS] @connection(keyName: "invoiceRetailerBySupplier", fields: ["id"])
  invoiceFarmer: [InvoiceBetweenSandF] @connection(keyName: "invoiceFarmerBySupplier", fields: ["id"])
  chatGroups: [ChatGroup]
    @connection(keyName: "chatGroupbySupplier", fields: ["id"])
  verified: Boolean
  contactDetails:ContactDetails
  logo: String
  updatedAt: String
  createdAt: String
}

type FarmerCompany @model {
  id: ID
  name: String
  employees: [User]
    @connection(keyName: "usersByFarmerCompany", fields: ["id"])
  address: String
  bankAccount: BankDetails
  rating: Rating
  registrationNumber: String
  mostRecentInvoiceNumber:String "YYYY-MM-XXXXX"
  listings: [FarmerListing]
    @connection(keyName: "listingsByFarmer", fields: ["id"])
  goodsTask: [GoodsTaskBetweenSandF]
    @connection(keyName: "goodsTasksByFarmer", fields: ["id"])
  paymentTask: [PaymentTaskBetweenSandF]
    @connection(keyName: "paymentTasksByFarmer", fields: ["id"])
  invoice: [InvoiceBetweenSandF] @connection(keyName: "invoiceByFarmer", fields: ["id"])
  chatGroups: [ChatGroup]
    @connection(keyName: "chatGroupbyFarmer", fields: ["id"])
  verified: Boolean
  contactDetails:ContactDetails
  logo: String
  updatedAt: String
  createdAt: String
}

"""
to add a chatgroup list per company so that we have a base truth to query/check from
"""
type ContactDetails{
  email: String
  phone:String
}

type Favourites {
  id: ID
  "Same as company ID"
  name: String
}

type Rating {
  numberOfRatings: Int
  currentRating: Float
}

type Address {
  street: String
  town: String
  postcode: Int
}

type BankDetails {
  bankName: String
  accountNumber: Int
}

type ChatGroup
  @model
  @key(
    name: "chatGroupbyRetailer"
    fields: ["retailerID", "updatedAt"]
    queryField: "getChatGroupsContainingRetailersByUpdatedAt"
  )
  @key(
    name: "chatGroupbySupplier"
    fields: ["supplierID", "updatedAt"]
    queryField: "getChatGroupsContainingSuppliersByUpdatedAt"
  )
   @key(
    name: "chatGroupbyFarmer"
    fields: ["farmerID", "updatedAt"]
    queryField: "getChatGroupsContainingFarmersByUpdatedAt"
  ) {
  id: ID
  "retailerID+supplierID or farmerID+supplierID"
  name: String
  retailerID: ID
  retailerCompany: RetailerCompany
  supplierID: ID
  supplierCompany: SupplierCompany
  farmerID: ID
  farmerCompany: FarmerCompany
  chatParticipants: [ChatGroupUsers]
    @connection(keyName: "gettingChatParticipantsByChatGroup", fields: ["id"])
  messages: [Message] @connection(keyName: "byChatGroup", fields: ["id"])
  updatedAt: String
  createdAt: String
  mostRecentMessage: String
  mostRecentMessageSender: String
}

type Message
  @model
  @key(
    name: "byChatGroup"
    fields: ["chatGroupID", "createdAt"]
    queryField: "messagesInChatByDate"
  ) {
  id: ID
  chatGroupID: ID
  "retailerID+supplierID or farmerID+supplierID"
  type: String
  "Text, Product Inquiry, PO, Quotation, Image"
  content: String
  senderID: ID
  sender: String
  updatedAt: String
  createdAt: String
}

type ChatGroupUsers
  @model
  @key(
    name: "gettingChatParticipantsByChatGroup"
    fields: ["chatGroupID", "userID"]
  )
  @key(name: "gettingChatGroupsByUser", fields: ["userID", "chatGroupID"]) {
  id: ID
  "userID + chatRoomID"
  userID: ID
  chatGroupID: ID
  "retailerID+supplierID or farmerID+supplierID"
  lastOnline: String
  chatGroup: ChatGroup @connection(fields: ["chatGroupID"])
  user: User @connection(fields: ["userID"])
  updatedAt: String
  createdAt: String
}

type SupplierListing
  @model
  @key(
    name: "listingsBySupplier"
    fields: ["supplierID", "productName"]
    queryField: "productListingBySupplier"
  )
  @key(
    name: "listingsByNameByPrice"
    fields: ["productName", "lowPrice"]
    queryField: "supplierListingByNameStartingWithLowestPrice"
  ) {
  id: ID
  supplier: SupplierCompany @connection(fields: ["supplierID"])
  supplierID: ID
  productName: String
  variety: String
  quantityAvailable: Float
  lowPrice: Float
  highPrice: Float
  minimumQuantity: Float
  productPicture: String
  grade: String
  siUnit: String
  updatedAt: String
  createdAt: String
}

type FarmerListing
  @model
  @key(
    name: "listingsByFarmer"
    fields: ["farmerID", "productName"]
    queryField: "productListingByFarmer"
  )
  @key(
    name: "listingsByNameByPrice"
    fields: ["productName", "lowPrice"]
    queryField: "farmerListingByNameStartingWithLowestPrice"
  ) {
  id: ID
  farmer: FarmerCompany @connection(fields: ["farmerID"])
  farmerID: ID
  productName: String
  variety: String
  quantityAvailable: Float
  lowPrice: Float
  highPrice: Float
  minimumQuantity: Float
  productPicture: String
  grade: String
  siUnit: String
  updatedAt: String
  createdAt: String
}

type ProductsInPurchaseOrder
  @model
  @key(
    name: "productsInPurchaseOrder"
    fields: ["purchaseOrderID"]
    queryField: "purchaseOrderItems"
  ) {
  id: ID
  purchaseOrderID: ID
  "retailerID+supplierID or farmerID+supplierID"
  name: String
  quantity: Float
  updatedAt: String
  createdAt: String
  siUnit: String
  variety: String
  grade: String
}

type OrderQuotation @model {
  id: ID
  "retailerID+supplierID or farmerID+supplierID"
  items: [Items]
  sum: Float
  logisticsProvided: Boolean
  paymentTerms: String
}

type Items {
  id:ID
  name: String
  quantity: Float
  siUnit: String
  variety: String
  grade: String
  price: Float
}

type GoodsTaskBetweenRandS
  @model
  @key(
    name: "goodsTasksByRetailer"
    fields: ["retailerID", "createdAt"]
    queryField: "goodsTaskForRetailerByDate"
  )
  @key(
    name: "goodsTasksRetailerBySupplier"
    fields: ["supplierID", "createdAt"]
    queryField: "goodsTaskRetailerForSupplierByDate"
  ) {
  id: ID
  "sameID as payment task and invoice"
  retailer: RetailerCompany @connection(fields: ["retailerID"])
  retailerID: ID
  supplier: SupplierCompany @connection(fields: ["supplierID"])
  supplierID: ID
  items: [Goods]
  updatedAt: String
  createdAt: String
  deliveryDate: String
  status: String
}

type GoodsTaskBetweenSandF
  @model
  @key(
    name: "goodsTasksByFarmer"
    fields: ["farmerID", "createdAt"]
    queryField: "goodsTaskForFarmerByDate"
  )
  @key(
    name: "goodsTasksFarmerBySupplier"
    fields: ["supplierID", "createdAt"]
    queryField: "goodsTaskFarmerForSupplierByDate"
  ) {
  id: ID
  "sameID as payment task and invoice"
  farmer: FarmerCompany @connection(fields: ["farmerID"])
  farmerID: ID
  supplier: SupplierCompany @connection(fields: ["supplierID"])
  supplierID: ID
  items: [Goods]
  updatedAt: String
  createdAt: String
  deliveryDate: String
  status: String
}

type PaymentTaskBetweenRandS
  @model
  @key(
    name: "paymentTasksByRetailer"
    fields: ["retailerID", "createdAt"]
    queryField: "paymentsTaskForRetailerByDate"
  )
  @key(
    name: "paymentTasksRetailerBySupplier"
    fields: ["supplierID", "createdAt"]
    queryField: "paymentsTaskRetailerForSupplierByDate"
  ) {
  id: ID
  retailer: RetailerCompany @connection(fields: ["retailerID"])
  retailerID: ID
  supplier: SupplierCompany @connection(fields: ["supplierID"])
  supplierID: ID
  paid: Boolean
  amount: Float
  payBefore: String
  receipt: String
  updatedAt: String
  createdAt: String
}

type PaymentTaskBetweenSandF
  @model
  @key(
    name: "paymentTasksByFarmer"
    fields: ["farmerID", "createdAt"]
    queryField: "paymentsTaskForFarmerByDate"
  )
  @key(
    name: "paymentTasksFarmerBySupplier"
    fields: ["supplierID", "createdAt"]
    queryField: "paymentsTaskFarmerForSupplierByDate"
  ) {
  id: ID
  farmer: FarmerCompany @connection(fields: ["farmerID"])
  farmerID: ID
  supplier: SupplierCompany @connection(fields: ["supplierID"])
  supplierID: ID
  paid: Boolean
  amount: Float
  payBefore: String
  receipt: String
  updatedAt: String
  createdAt: String
}

type InvoiceBetweenRandS
  @model
  @key(
    name: "invoiceByRetailer"
    fields: ["retailerID", "createdAt"]
    queryField: "invoiceForRetailerByDate"
  )
  @key(
    name: "invoiceRetailerBySupplier"
    fields: ["supplierID", "createdAt"]
    queryField: "invoiceRetailerForSupplierByDate"
  ) {
  id: ID
  "PaymentTask + Invoice"
  retailer: RetailerCompany @connection(fields: ["retailerID"])
  retailerID: ID
  supplier: SupplierCompany @connection(fields: ["supplierID"])
  supplierID: ID
  items: [Goods]
  amount: Float
  updatedAt: String
  createdAt: String
  paid: Boolean
  receivedBy: String
}

type InvoiceBetweenSandF
  @model
  @key(
    name: "invoiceByFarmer"
    fields: ["farmerID", "createdAt"]
    queryField: "invoiceForFarmerByDate"
  )
  @key(
    name: "invoiceFarmerBySupplier"
    fields: ["supplierID", "createdAt"]
    queryField: "invoiceFarmerForSupplierByDate"
  ) {
  id: ID
  "PaymentTask + Invoice"
  farmer: FarmerCompany @connection(fields: ["farmerID"])
  farmerID: ID
  supplier: SupplierCompany @connection(fields: ["supplierID"])
  supplierID: ID
  items: [Goods]
  amount: Float
  updatedAt: String
  createdAt: String
  paid: Boolean
  receivedBy: String
}

type Goods {
  id: String
  name: String
  quantity: Float
  siUnit: String
  variety: String
  grade: String
  price: Float
}
